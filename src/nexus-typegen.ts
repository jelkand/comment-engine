/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import { Context } from "./server/context"
import { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CommentCreateInput: { // input type
    contentId: string; // ID!
    tenantId: string; // ID!
    text: string; // String!
  }
  TenantCreateInput: { // input type
    name: string; // String!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Comment: { // root type
    commentableId: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    text: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Commentable: { // root type
    contentId: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    tenantId: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: {};
  Query: {};
  Tenant: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    name: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Comment: { // field return type
    commentable: NexusGenRootTypes['Commentable'] | null; // Commentable
    commentableId: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    text: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Commentable: { // field return type
    comments: NexusGenRootTypes['Comment'][] | null; // [Comment!]
    contentId: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    tenantId: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Mutation: { // field return type
    addCommentToCommentable: NexusGenRootTypes['Commentable']; // Commentable!
    deleteComment: NexusGenRootTypes['Comment'] | null; // Comment
    registerTenant: NexusGenRootTypes['Tenant']; // Tenant!
  }
  Query: { // field return type
    allComments: Array<NexusGenRootTypes['Comment'] | null>; // [Comment]!
    commentableById: NexusGenRootTypes['Commentable'] | null; // Commentable
    tenantById: NexusGenRootTypes['Tenant'] | null; // Tenant
    tenants: Array<NexusGenRootTypes['Tenant'] | null>; // [Tenant]!
  }
  Tenant: { // field return type
    commentables: NexusGenRootTypes['Commentable'][] | null; // [Commentable!]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // ID!
    name: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    commentable: 'Commentable'
    commentableId: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    text: 'String'
    updatedAt: 'DateTime'
  }
  Commentable: { // field return type name
    comments: 'Comment'
    contentId: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    tenantId: 'String'
    updatedAt: 'DateTime'
  }
  Mutation: { // field return type name
    addCommentToCommentable: 'Commentable'
    deleteComment: 'Comment'
    registerTenant: 'Tenant'
  }
  Query: { // field return type name
    allComments: 'Comment'
    commentableById: 'Commentable'
    tenantById: 'Tenant'
    tenants: 'Tenant'
  }
  Tenant: { // field return type name
    commentables: 'Commentable'
    createdAt: 'DateTime'
    id: 'ID'
    name: 'String'
    updatedAt: 'DateTime'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    addCommentToCommentable: { // args
      data: NexusGenInputs['CommentCreateInput']; // CommentCreateInput!
    }
    deleteComment: { // args
      id: string; // ID!
    }
    registerTenant: { // args
      data: NexusGenInputs['TenantCreateInput']; // TenantCreateInput!
    }
  }
  Query: {
    commentableById: { // args
      id: string; // ID!
    }
    tenantById: { // args
      id: string; // ID!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}